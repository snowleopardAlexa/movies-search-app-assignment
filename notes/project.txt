PROJECT NOTES

App functionality:


1. Fetch movies from the API endpoint - OMDB free API.
2. Create Search - write Search function. 
2. Add movies to Redux store.
3. Retrieve movies from Redux store. 
4. Display movies on the screen. 

- setup initial state that equals to movies, movies is property

movieSlice.js

import { createSlice } from '@reduxjs/toolkit'
const initialState = {
    movies: {}
}

- export actions and reducer

export const { addMovies } = movieSlice.actions

- get a value from store - state, name of the movieSlice, and name of the property from initialState

export const getAllMovies = (state) => state.movies.movies
export default movieSlice.reducer

- synchronous action creators had been used in the code until I switched to async action creators


- I converted synchronous action creators into async action creators with a help of MIDDLEWARE THUNK
- API call built with a help of async action creator unables us to add extraReducers to the store.
- async action creators = extraReducers 



- Why Api call with the help of async action creator is better than a call with synchronous action creator?
With async action creator we can add extraReducers 


SYNCHRONOUS ACTION CREATOR 



STORE.JS

import { configureStore } from '@reduxjs/toolkit'
import moviesReducer from "./movies/movieSlice"

// create the store
export const store = configureStore({
    // reducer is an object
    reducer: {
        movies: moviesReducer
    }
})

HOME.JS

import './Home.scss'
import MoviesList from '../MoviesList/MoviesList'
import { useEffect } from "react";
import movieApi from "../apis/movieApi";
import { APIKey } from "../apis/movieApiKey";
import { useDispatch } from "react-redux";
import { addMovies } from "../../redux/movies/movieSlice";

const Home = () => {
    const movieText = "Cat";
    // whenever I get values from api, I want to dispatch an action
    // after dispatch - data is sent to reducer - this caused the state to update!
    // react hook useDispatch can't be called inside callback function
    const dispatch = useDispatch();
  
    useEffect(() => {
      const fetchMovies = async () => {
        const response = await movieApi
          .get(`?apiKey=${APIKey}&s=${movieText}&type=movie`)
          .catch((err) => {
            console.log("Error :", err);
          });
        // dispatch action addMovies - pass response.data - data is the key which contains all the resuslts
        dispatch(addMovies(response.data));
      };
      fetchMovies();
    }, []);
    return (
        <>
        <div className="home__container">
          <div className="search__box">
              <input
                type="text"
                placeholder="Search movie..."
              />
          </div>
        </div>
        <MoviesList />
        </>
    );
};

export default Home;

- MOVIES DETAILS PAGE --> if we want to fetch movie detail data from API call, we have to 
add export const fetchAsyncMovieDetail to movieSlice.js and make:
- async call based on { id }
- change apiKey - include parameter i --> valid IMDb ID 
- change apiKey - include paramteter plot --> either short or full 
!!! --> check Parameters on OMDb API website (REST API parameters)
- write extra reducer for it - fetchAsyncMovieDetail.fullfilled

MoviesDetails.jsx

-  get the ID to pass to async action creator
-  we get the ID with the use of useParams
-  dispatch async action creator --> how? --> use useEffect
-  get details from the store with the use of useSelector 
-  dispatch async action creator
-  pass id into function call ()
-  add dispatch and imdbID to dependency - WARNING

    // get the ID to pass to async action creator
    // we get the ID with the use of useParams hook
    const { imdbID } = useParams()
    // dispatch async action creator --> how? --> use useEffect
    const dispatch = useDispatch()
    // get details from the store with the use of useSelector 
    const data = useSelector(getSelectedMovieDetail)
    useEffect(() => {
      // dispatch async action creator
      // pass id into function call ()
      dispatch(fetchAsyncMovieDetail(imdbID))
      // add dispatch and imdbID to dependency - WARNING
    }, [dispatch, imdbID])

- export selected movie detail in movieSlice

// export actions and reducer
export const { addMovies } = movieSlice.actions
// get a value from store - state, name of the movieSlice, and name of the property from initialState
export const getAllMovies = (state) => state.movies.movies
// export selected movie detail
export const getSelectedMovieDetail = (state) => state.movies.selectMovieDetail
export default movieSlice.reducer

- console log data to console in MoviesDetails.jsx

    // log complete detail data in console
    console.log(data)
    useEffect(() => {
      // dispatch async action creator
      // pass id into function call ()
      dispatch(fetchAsyncMovieDetail(imdbID))
      // add dispatch and imdbID to dependency - WARNING
    }, [dispatch, imdbID])

- 

- CLEANUP useEffect function in MovieDetail.jsx -->
- when we change the movie, we can still see previous title of the movie after clicking on
the next movie this is why we need a cleanup function

- remove addMovies action because now it is a part of fetchAsyncMovies function 

 // action
        addMovies: (state, {payload}) => {
            state.movies = payload;
        },


        // add ESLint config 
        // add Prettier config 
        // add VSCode settings to auto-format on save 

        